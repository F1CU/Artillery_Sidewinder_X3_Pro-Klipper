#### IMPORTANT!!! Do this if you want to use my macros.cfg!!! ####
##
##For all functions to work properly, you must add the following G-Code lines to your Slicer (I tested it on OrcaSlicer and PrusaSlicer):
##
## - Start G-Code:
##
## SET_PRINT_STATS_INFO TOTAL_LAYER=[total_layer_count]
## BED_MESH_CALIBRATE AREA_START={first_layer_print_min[0]},{first_layer_print_min[1]} AREA_END={first_layer_print_max[0]},{first_layer_print_max[1]}
## START_PRINT
##
## - End G-Code:
##
## END_PRINT
##
## - Before layer change G-Code:
##
## ;BEFORE_LAYER_CHANGE
## ;[layer_z]
## G92E0
##
## - After layer change G-Code:
## 
## M117 Layer {layer_num+1}/[total_layer_count] : {filament_settings_id[0]}
## SET_PRINT_STATS_INFO CURRENT_LAYER={layer_num + 1}
## ;AFTER_LAYER_CHANGE
## ;[layer_z]

########################################
###                                  ###
###            START_PRINT           ###
###                                  ###
########################################

[gcode_macro START_PRINT]
gcode:
  #Get Bed and Extruder temperature from Slicer GCode
  G28
  {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
  {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}

  CLEAR_PAUSE
  BED_MESH_PROFILE LOAD=default  
  SET_LED LED=hotend_led RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=1.0

  G28 ; Home all Axes
  G12 ; Clear the nozzle 
  G92 E0 ; reset extruder
  G90 ; set absolute positioning

  M117 Heatup Bed {BED_TEMP}°C Nozzle {EXTRUDER_TEMP}°C
  # Change for unheated build plate
  {% if params.BED_TEMP != "0" %} 
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={BED_TEMP}  
    SET_LED LED=hotend_led RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP*0.96} MAXIMUM={BED_TEMP*1.04}
    SET_LED LED=hotend_led RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=1.0
  {% endif %}

  # Home again after heating bed up. 
  G28 Z
  
  G1 Z10 F3000 ; move z up little to prevent scratching of surface

  G28 X Y
  
  SET_LED LED=hotend_led RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}    
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
  SET_LED LED=hotend_led RED=0.0 GREEN=0.0 BLUE=0.0 WHITE=1.0

  PRIME_LINE
  #INPUT_SHAPER_SETTINGS
  
########################################
###                                  ###
###               RESUME             ###
###                                  ###
########################################

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    #### get VELOCITY parameter if specified ####
    {% if 'VELOCITY' in params|upper %}
      {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
    {%else %}
      {% set get_params = "" %}
    {% endif %}
    ##### end of definitions #####
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G91
      G1 E{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}  
    RESUME_BASE {get_params}

########################################
###                                  ###
###               PAUSE              ###
###                                  ###
########################################

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    PAUSE_BASE
    G91
    {% if printer.extruder.can_extrude|lower == 'true' %}
      G1 E-{E} F2100
    {% else %}
      {action_respond_info("Extruder not hot enough")}
    {% endif %}
    {% if "xyz" in printer.toolhead.homed_axes %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% else %}
      {action_respond_info("Printer not homed")}
    {% endif %} 

########################################
###                                  ###
###             END_PRINT            ###
###                                  ###
########################################

[gcode_macro END_PRINT]
gcode:
  SET_LED LED=hotend_led RED=0.0 GREEN=1.0 BLUE=0.0 WHITE=0.0
   
  M117 End print
  
  PRESENT_PRINT
  TURN_OFF_HEATERS

  G90 ;Absolute positionning
  M106 S0 ;Turn-off fan
  M84 ;Disable all steppers but Z
  TURN_OFF_HEATERS
  
  M117 Print Complete

########################################
###                                  ###
###             PRIME_LINE           ###
###                                  ###
########################################

[gcode_macro PRIME_LINE]
gcode: 
  SAVE_GCODE_STATE NAME=prime_line_state

  G90
  G92 E0 ; reset extruder
  G1 X2 Y20 Z0.3 F5000.0 ; move to start-line position 
  
  G1 Z1.0 F3000 ; move z up little to prevent scratching of surface
  G1 X2 Y20 Z0.3 F5000.0 ; move to start-line position
  G1 X2 Y200.0 Z0.3 F1500.0 E15 ; draw 1st line
  G1 X2 Y200.0 Z0.4 F5000.0 ; move to side a little
  G1 X2 Y20 Z0.4 F1500.0 E30 ; draw 2nd line
  G92 E0 ; reset extruder
  G1 Z1.0 F3000 ; move z up little to prevent scratching of surface 

  RESTORE_GCODE_STATE NAME=prime_line_state

########################################
###                                  ###
###           PRESENT_PRINT          ###
###                                  ###
########################################

[gcode_macro PRESENT_PRINT]
gcode:
  SAVE_GCODE_STATE NAME=present_print_state

  # Move nozzle away from print while retracting
  G91 ;Relative positioning
  G1 E-2 F2700 ;Retract a bit
  G1 E-2 Z0.2 F2400 ;Retract and raise Z
  G1 X5 Y5 F3000 ;Wipe out
  G1 Z10 ;Raise Z more
  G90 ;Absolute positionning
  G0 X240 Y240 ; move to back right corner
  M106 S0 ;Turn-off fan
  M84 X Y E ;Disable all steppers but Z

  ; {% set X_MAX = printer.toolhead.axis_maximum.x|float %}
  ; {% set Y_MAX = printer.toolhead.axis_maximum.y|float %}
  ; {% set Z_MAX = printer.toolhead.axis_maximum.z|float %}
  ; {% set Z_PARK_MIN = 100 | float %}
  ; {% set Z_PARK_LIFT = 10 | float %}
  ; G90
  ; {% if printer.toolhead.position.z + Z_PARK_LIFT > Z_PARK_MIN %}
  ;   G1 X{X_MAX / 2} Y{Y_MAX * 0.8} Z{printer.toolhead.position.z + Z_PARK_LIFT} F4000
  ; {% else %}
  ;   G1 X{X_MAX / 2} Y{Y_MAX * 0.8} Z{Z_PARK_MIN} F4000
  ; {% endif %}

  RESTORE_GCODE_STATE NAME=present_print_state

########################################
###                                  ###
###           CANCEL_PRINT           ###
###                                  ###
########################################

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
    M117 Print canceled
    
    PRESENT_PRINT
    TURN_OFF_HEATERS
    CANCEL_PRINT_BASE

########################################
###                                  ###
###   _TOOLHEAD_PARK_PAUSE_CANCELT   ###
###                                  ###
########################################

[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
#   ##### set park positon for x and y #####
#   # default is your max posion from your printer.cfg
#   {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
#   {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
#   {% set z_park_delta = 2.0 %}
#   ##### calculate save lift position #####
#   {% set max_z = printer.toolhead.axis_maximum.z|float %}
#   {% set act_z = printer.toolhead.position.z|float %}
#   {% if act_z < (max_z - z_park_delta) %}
#     {% set z_safe = z_park_delta %}
#   {% else %}
#     {% set z_safe = max_z - act_z %}
#   {% endif %}
#   ##### end of definitions #####
#   {% if printer.extruder.can_extrude|lower == 'true' %}
#     M83
#     G1 E-{extrude} F2100
#     {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
#   {% else %}
#     {action_respond_info("Resume1 Extruder not hot enough")}
#   {% endif %}
#   {% if "xyz" in printer.toolhead.homed_axes %}
#     G91
#     G1 Z{z_safe} F900
#     G90
#     G1 X{x_park} Y{y_park} F6000
#     {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
#   {% else %}
#     {action_respond_info("Printer not homed")}
#   {% endif %}

# [gcode_macro SET_ACTIVE_SPOOL]
# gcode:
#   {% if params.ID %}
#     {% set id = params.ID|int %}
#     {action_call_remote_method(
#        "spoolman_set_active_spool",
#        spool_id=id
#     )}
#   {% else %}
#     {action_respond_info("Parameter 'ID' is required")}
#   {% endif %}

# [gcode_macro CLEAR_ACTIVE_SPOOL]
# gcode:
#   {action_call_remote_method(
#     "spoolman_set_active_spool",
#     spool_id=None
#   )}

########################################
###                                  ###
###       INPUT_SHAPER_SETTINGS      ###
###                                  ###
########################################

#[gcode_macro INPUT_SHAPER_SETTINGS]
#gcode:
#SET_VELOCITY_LIMIT MINIMUM_CRUISE_RATIO=0
#SET_PRESSURE_ADVANCE ADVANCE=0
#SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0
#TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5

########################################
###                                  ###
###            force_move            ###
###                                  ###
########################################

[force_move]
enable_force_move=True

########################################
###                                  ###
###            WIPE_NOZZLE           ###
###                                  ###
########################################

[gcode_macro WIPE_NOZZLE]
description: Use the filament litter box 
gcode: 
    {% set wipe_count = params.COUNT|default(3)|int %}
    {% set exit_x = printer.toolhead.axis_maximum.x - 50 %}

    SAVE_GCODE_STATE NAME=wipe_nozzle_state

    {% set wipe_count = params.COUNT|default(3)|int %}
    {% set exit_x = printer.toolhead.axis_maximum.y - 50 %}


    ; move to the perimeter of the print bed
    G90
    G0 Z2 F1000
    G0 X{exit_x} Y{printer.toolhead.axis_maximum.y} F2000

    ; move out to the wipe box 
    FORCE_MOVE STEPPER=stepper_y DISTANCE=25 VELOCITY=30
    FORCE_MOVE STEPPER=stepper_z DISTANCE=-2.9 VELOCITY=15

    ; Set extruder temp
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    SET_LED LED=hotend_led RED=1.0 GREEN=0.0 BLUE=0.0 WHITE=0.0
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={EXTRUDER_TEMP}    
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP*0.98} MAXIMUM={EXTRUDER_TEMP*1.02}
    SET_LED LED=hotend_led RED=0.0 GREEN=1.0 BLUE=0.0 WHITE=0.0

    ; Extrude 15mm filament before wiping 
    G91
    G1 E15 F150
    G1 E-1.
    
    ; Turn off nozzle heating
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    
    ; wipe on the roller
    {% for i in range(wipe_count) %}
        FORCE_MOVE STEPPER=stepper_x DISTANCE=35 VELOCITY=85
        FORCE_MOVE STEPPER=stepper_x DISTANCE=-35 VELOCITY=85
    {% endfor %}

    ; wipe on the rubber 
    {% for i in range(wipe_count) %}
    FORCE_MOVE STEPPER=stepper_x DISTANCE=-30 VELOCITY=85
    FORCE_MOVE STEPPER=stepper_x DISTANCE=30 VELOCITY=85
    {% endfor %}
    
    ; return to the print bed    
    FORCE_MOVE STEPPER=stepper_z DISTANCE=3.2 VELOCITY=15
    FORCE_MOVE STEPPER=stepper_y DISTANCE=-25 VELOCITY=30
    
    ; wash hands
    RESTORE_GCODE_STATE NAME=wipe_nozzle_state

########################################
###                                  ###
###                G12               ###
###                                  ###
########################################

[gcode_macro G12]
description: Clean nozzle in the wipe box
gcode: 
    {% set wipe_count = params.C|default(3)|int %}
    WIPE_NOZZLE COUNT={wipe_count}

########################################
###                                  ###
###           load_filament          ###
###                                  ###
########################################

[gcode_macro load_filament]
gcode:
  SET_LED LED="hotend_led" RED=1 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
  M109 S220
  G91
  G1 E100. F500.
  G1 E-2.
  G4 P5000
  M104 S0
  SET_LED LED="hotend_led" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1

########################################
###                                  ###
###          unload_filament         ###
###                                  ###
########################################

[gcode_macro unload_filament]
gcode:
  SET_LED LED="hotend_led" RED=1 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
  M109 S220
  G91
  G1 E-100. F3000.
  G4 P5000
  M104 S0
  SET_LED LED="hotend_led" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1

########################################
###                                  ###
###          calibrate_probe         ###
###                                  ###
########################################

[gcode_macro calibrate_probe]
gcode:
    probe_calibrate

########################################
###                                  ###
###             pid_nozzle           ###
###                                  ###
########################################

[gcode_macro pid_nozzle]
gcode:
    TURN_OFF_HEATERS
    PID_CALIBRATE HEATER=extruder TARGET=230
    SAVE_CONFIG

########################################
###                                  ###
###              pid_bed             ###
###                                  ###
########################################

[gcode_macro pid_bed]
gcode:
    TURN_OFF_HEATERS
    PID_CALIBRATE HEATER=heater_bed TARGET=60
    SAVE_CONFIG

########################################
###                                  ###
###            idle_timeout          ###
###                                  ###
########################################

[idle_timeout]
gcode:
  {% if printer.pause_resume.is_paused %}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  {% else %}
    TURN_OFF_HEATERS
    M84
  {% endif %}
timeout: 1800

########################################
###                                  ###
###                M420              ###
###                                  ###
########################################

[gcode_macro M420]
description: Load the current mesh
gcode:
  BED_MESH_PROFILE LOAD=default

########################################
###                                  ###
###         SHOW_MESH_RESULT         ###
###                                  ###
########################################

[gcode_macro SHOW_MESH_RESULT]
description: Shows the mesh results
gcode:
    BED_MESH_OUTPUT pgp=0

########################################
###                                  ###
###          AUTO_BED_LEVEL          ###
###                                  ###
########################################

[gcode_macro AUTO_BED_LEVEL]
description: Home and run ABL *DO NOT USE IN START G CODE*
gcode: 
    M190 S60 ;HEAT BED
    G28
    BED_MESH_CALIBRATE
    SAVE_CONFIG

########################################
###                                  ###
###            [respond]             ###
###                                  ###
########################################

[respond]

########################################
###                                  ###
###                G34               ###
###                                  ###
########################################

#[gcode_macro G34]
#description: z tilt measurement
#gcode:
#    G28
#    z_tilt_adjust
#    G28

########################################
###                                  ###
###        BED_MESH_CALIBRATE        ###
###                                  ###
########################################

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
